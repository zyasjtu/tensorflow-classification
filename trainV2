import sys
import tensorflow as tf
import numpy as np
import networks.vgg as vgg
import utils
import os
import cv2


classes_name = os.listdir('/volume/data/Logos')
train_set = open('/volume/source/tensorflow-classification/data/train.txt', 'r')
classes_id = [str(x) for x in range(len(classes_name))]
mean = np.array([103.939, 116.779, 123.68])

def train(isvgg19):
	print('prepare network...')
	x = tf.placeholder(dtype=tf.float32, shape=[None, 224, 224, 3])	
	if isvgg19 == 'True':
		vgg_network = vgg.Vgg(x, len(classes_id), True, '/volume/model/vgg19.npy')
	else:
		vgg_network = vgg.Vgg(x, len(classes_id), False, '/volume/model/vgg16.npy')
	predictions, logits, feature = vgg_network.build(False)

	feat_mat = []
	lines = train_set.readlines()

	print('start...')
	config = tf.ConfigProto()
	config.gpu_options.allow_growth = True
	with tf.Session(config=config) as sess:
		sess.run(tf.global_variables_initializer())
		vgg_network.loadModel(sess, True)

		for line in lines:
			print(line)
			line = line.strip('\n')
			split_idx = line.find(',')
			img_path = line[0:split_idx]
			img_label = line[split_idx + 1:]
			img = utils.load_image(img_path, 224, 224)
			img = img - mean
			batch1 = img.reshape([1, 224, 224, 3])
			feat_vec = sess.run(feature, feed_dict={x: batch1})[0]
			feat_mat.append(feat_vec)
        
	for i in range(10):
		np.savetxt('./models/feature_mat_part' + str(i) + '.txt', feat_mat[i*10000:min((i+1)*10000,len(feat_mat))])

	print('kmeans begin..')
	criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
        flags = cv2.KMEANS_RANDOM_CENTERS
        _, labels, centers = cv2.kmeans(np.array(feat_mat, dtype=np.float32), 100, None, criteria, 10, flags)
        print('done.')
        np.savetxt('./models/labels.txt', labels)
        np.savetxt('./models/centers.txt', centers)
        

if __name__ == '__main__':
	train(sys.argv[1])
